<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | haoweishow Blog]]></title>
  <link href="http://haoweishow.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://haoweishow.com/"/>
  <updated>2015-01-13T21:23:40+08:00</updated>
  <id>http://haoweishow.com/</id>
  <author>
    <name><![CDATA[haoweishow]]></name>
    <email><![CDATA[haoweishow@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OOM故障分析-案例1]]></title>
    <link href="http://haoweishow.com/blog/2014/09/13/oomgu-zhang-fen-xi-an-li-1/"/>
    <updated>2014-09-13T10:10:42+08:00</updated>
    <id>http://haoweishow.com/blog/2014/09/13/oomgu-zhang-fen-xi-an-li-1</id>
    <content type="html"><![CDATA[<h3>背景</h3>

<hr />

<ul>
<li>生产环境,应用刚上线,几乎每天一次OOM.</li>
<li>操作系统: AIX 6.1</li>
<li>JDK版本: J2RE 5.0 IBM J9 2.3 AIX ppc64-64 build j9vmap6423-20100808</li>
<li>JVM参数: -Xmx2048m -Xms2048m 无其它参数设置,采用JVM默认设置</li>
<li>分析工具: jca455.jar  ibm_ha446.jar</li>
</ul>


<h3>分析1</h3>

<hr />

<p>第一次出现故障,发过来java进程的dump文件,3组12个文件:</p>

<ul>
<li>4个heapdump.xxxx.phd;</li>
<li>4个javacore.xxxx.txt;</li>
<li>4个Snap.xxxx.trc</li>
</ul>


<h4>使用IBM HA工具分析phd文件</h4>

<p>打开<strong>[Analysis View]</strong>如下:<br/>
<img src="/images/postImage/20140913-1-IBM-ha-AnalysisView.png"></p>

<ul>
<li>通过HA的分析,结果很明显,java/util/Stack里的数据量超大,占用内存92.2%</li>
<li>这个Stack是自定义的XML解析器里的一个属性,用于存储在解析过程中存储XML节点信息</li>
<li>看到这里,如果对应用了解的话,是能够找到程序哪个模块调用这个XML解析器,可是我不了解这个应用,而且不在现场</li>
<li>接下来的分析过程,包括未来几天陆续出现的OOM,分析其中的phd文件都是同样的现象,Stack里的数据量超大,都是超过90%的堆内存占用</li>
</ul>


<p>打开<strong>[Root List]</strong>如下:<br/>
<img src="/images/postImage/20140913-2-IBM-ha-RootList.png"></p>

<ul>
<li>排名第一的是XML解析器,其它的对象内存使用都很小</li>
</ul>


<p>打开<strong>[Tree View]</strong>如下:<br/>
<img src="/images/postImage/20140913-3-IBM-ha-TreeView.png"></p>

<ul>
<li>这里有个疑问,为什么这个解析器是root object,明明是有线程调用这个解析器进行XML解析的</li>
<li><strong>关于JVM的root object还是不了解!!</strong></li>
</ul>


<h4>使用IBM JCA工具分析javacore文件</h4>

<p>打开<strong>[Thread Dump List]</strong>如下:<br/>
<img src="/images/postImage/20140913-4-IBM-jca-Thread.png"></p>

<ul>
<li>在网上查找关于javacore文件相关资料的时候,网上有个案例,可以根据这里的WARN提示就定位出产生OOM的线程</li>
<li>我的这个案例不一样了,可以看到这几个WARN涉及的线程申请的内存都很小,说明这个时候内存已经被使用殆尽,这几个线程不是导致OOM的真正原因</li>
</ul>


<p>打开<strong>[Thread Status]</strong>如下:<br/>
<img src="/images/postImage/20140913-5-IBM-jca-ThreadStatus.png"></p>

<ul>
<li>这里显示的线程信息,与OOM没有关系,但是可以看到这个应用里的一些问题,很多线程都处于Blocked状态,左下角框起来的仅仅是部分,几乎都是由于日志记录引起的</li>
<li>这个应用由于业务场景的需要,需要记录交易的详细日志.后来到现场看到系统的日志,一共2个还是3个日志文件,每个小时切换一个日志文件.</li>
<li>近300个线程,将大量的交易日志写到两个文件中,锁的竞争可想而知;这里其实也有优化的空间的,可以根据某些关键字,将日志文件分类,就像数据库表分区一样;相信300个线程写分散到20个日志文件中,性能的提升应该是可见的.</li>
</ul>


<h4>初步分析</h4>

<ul>
<li>至此,导致OOM的直接原因是解析XML的时候,该解析器的Stack里的数据超大</li>
<li>而Stack里的数据超大,是不是解析过程中陷入某种循环无法退出导致呢?</li>
</ul>


<h3>分析2</h3>

<p>终于到现场进行分析了,很庆幸的是,在现场的性能测试环境能够重现该问题.<br/>
分析该解析器:</p>

<ul>
<li>该类在解析XML的时候,用Stack来存储节点的信息</li>
<li>遇到节点开始,将节点的对象入栈,遇到节点结束,弹栈</li>
<li>因此造成Stack数据量大就这能出现在入栈的地方了.</li>
<li><p>所以在入栈之后,增加判断,当栈的size超过阀值之后,打印出一些信息
<code>java  
//伪代码  
public class xxxxReader extends xxxx{
  private Stack stack = new Stack();
  /**************************************************************/
  public void debug(){
      if(stack.size()&gt;1000){
          System.out.println("stacksize:"+stack.size());
          Thread.dumpStack();//打印栈信息,就知道哪个模块调用到这个解析器
      }
  }
  /**************************************************************/
  public void startElement(){
      stack.push(obj);
      debug();
  }
  public void endElement(){
      stack.pop();
  }
  public void startArray(){
      stack.push(obj);
      debug();
  }
  public void endArray(){
      stack.pop();
  }
}
</code></p></li>
<li><p>在性能测试环境打上该类,重启,再次进行压力测试.</p></li>
<li>半个小时左右的样子,出现OOM,经过统计System.out和Thread.dumpStack()的日志,锁定了两个调用的地方.</li>
<li>再次修改这个解析器,加入临时属性,用于保存要解析的报文,这样在出现超大Stack的时候,可以将报文打印出来,这个代码就不贴了.</li>
<li>重启,再压,得到异常时候的报文,该报文的结构正常,应该不会导致死循环,于是在本地编写解析器的测试代码,解析该报文1次,1万次都正常.</li>
<li>难道是多线程的问题呢?</li>
<li>修改测试代码,两个线程,同时各执行1万次,问题重现了!!!!</li>
<li>又多跑了很多次,稳定重现,有时候是OOM,有时候是解析过程中抛解析的异常,很明显这个解析器多线不安全</li>
<li>至此,该问题已经基本定位,该解析模块比较复杂,没深入研究,因为我这里有十分成熟的解决方案</li>
<li>替换调用该解析器的两处代码,重启,再压,问题解决.</li>
</ul>


<h3>感受</h3>

<ul>
<li>刚开始被派到现场解决这个问题的时候,心里一直很忐忑,解决不了怎么办?因为之前给的dump文件没有分析出问题点,现场能提供的肯定也是这些文件.解决不了怎么跟客户交代呢&hellip;</li>
<li>来到现场,问题能够重现,有戏!</li>
<li>分析过程还是要根据经验,逐步排查问题点</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[格式化Java代码]]></title>
    <link href="http://haoweishow.com/blog/2014/09/05/ge-shi-hua-javadai-ma/"/>
    <updated>2014-09-05T10:55:16+08:00</updated>
    <id>http://haoweishow.com/blog/2014/09/05/ge-shi-hua-javadai-ma</id>
    <content type="html"><![CDATA[<h2>背景</h2>

<hr />

<ul>
<li>产品中一个核心模块，会根据配置文件生成运行时的java代码（一个完整的java类）。</li>
<li>自动生成的java类，没有对其进行格式化。</li>
<li>排错时不方便阅读，代码量小还好，代码多的话，很难看清楚里面的逻辑，因此每次都是把代码拷贝到eclipse里面格式之后再看。</li>
</ul>


<h2>过程</h2>

<hr />

<ul>
<li>搜索到这个文章,<a href="http://ssscripting.wordpress.com/2009/06/10/how-to-use-the-eclipse-code-formatter-from-your-code/">How to use the eclipse code formatter from your code</a>,自备梯子.</li>
<li>作者是通过eclipse的formatter组件实现代码的格式化.</li>
<li>按照文章的描述逐步实现,引入eclipse的10个jar包,可以实现代码的格式化.</li>
<li>但是引入10个jar到项目中,过于复杂.</li>
<li>该文章的评论中有人提到<a href="http://sourceforge.net/projects/jastyle/">jastyle</a>.</li>
</ul>


<h2>实现</h2>

<ul>
<li>下载jastyle的源码,并导入到eclipse工程中,当然也可以直接下载jar包使用.下图是导入到ecipse里的源码,可以看到代码还是很精简独立的.    <br/>
<img src="/images/postImage/20140905-1.png"></li>
<li>该模块的Main.java是格式化java代码的入口类.</li>
<li>从中抽取出格式化单个java文件函数,测试代码: <br/>
<code>java TestJavaFormat.java
package net.barenca.jastyle;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.File;import java.io.FileReader;import java.io.FileWriter;import java.io.IOException;import java.io.PrintWriter;import java.io.Reader;public class TestJavaFormat {   public static void main(String[] args) throws IOException {     String fileName = "C:/share/javaworkspace/jar/src/Test.java";       Reader in = new BufferedReader(new FileReader(fileName));       String tmpFileName = fileName + ".tmp";     File file = new File(tmpFileName);      file.delete();      PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(tmpFileName)));
              //开始对文件进行格式化        ASFormatter formatter = new ASFormatter();      formatter.setJavaStyle();       ASStreamIterator streamIterator = new ASStreamIterator(in);     formatter.init(streamIterator);     while (formatter.hasMoreLines()) {          out.println(formatter.nextLine().toString());       }
              out.flush();        out.close();        in.close();
              new File(fileName).renameTo(new File(fileName + ".orig"));      new File(tmpFileName).renameTo(new File(fileName)); }}
</code></li>
</ul>

]]></content>
  </entry>
  
</feed>
